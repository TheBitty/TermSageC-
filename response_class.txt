
        message_type type;
    };

    class response {

        public:

            response(const std::string& json_string, message_type type=message_type::generation): type(type)
            {
                this->json_string = json_string;
                try 
                {
                    json_data = json::parse(json_string); 
                    
                    if (type==message_type::generation && json_data.contains("response")) simple_string=json_data["response"].get<std::string>(); 
                    else
                    if (type==message_type::embedding && json_data.contains("embeddings")) simple_string=json_data["embeddings"].get<std::string>();
                    else
                    if (type==message_type::chat && json_data.contains("message")) simple_string=json_data["message"]["content"].get<std::string>();
                                         
                    if ( json_data.contains("error") ) error_string =json_data["error"].get<std::string>();
                }
                catch(...) { if (ollama::use_exceptions) throw ollama::invalid_json_exception("Unable to parse JSON string:"+this->json_string); valid = false; }
            }
            
            response() {json_string = ""; valid = false;}
            ~response(){};

            bool is_valid() const {return valid;};

            const std::string& as_json_string() const
            {
                return json_string;
            }

            const json& as_json() const
            {
                return json_data;                
            }

            const std::string& as_simple_string() const
            {
                return simple_string;               
            }

            bool has_error() const
            {
                if ( json_data.contains("error") ) return true;
                return false;                
            }

            const std::string& get_error() const
            {
                return error_string;
            }

            friend std::ostream& operator<<(std::ostream& os, const ollama::response& response) { os << response.as_simple_string(); return os; }

            const message_type& get_type() const
            {
                return type;
            }

            //operator std::string() const { return this->as_simple_string(); }
            operator std::string() const { return this->as_simple_string(); }
            //const operator std::string() const { return this->as_simple_string(); }           


        private:

        std::string json_string;
        std::string simple_string;
        std::string error_string;

        json json_data;        
        message_type type;
        bool valid;        
    };

}
